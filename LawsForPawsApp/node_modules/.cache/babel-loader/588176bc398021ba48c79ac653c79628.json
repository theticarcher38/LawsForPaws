{"ast":null,"code":"/**\n * Does a simple sanitization of all elements\n * in an untrusted string\n */\nconst sanitizeDOMString = untrustedString => {\n  try {\n    if (untrustedString instanceof IonicSafeString) {\n      return untrustedString.value;\n    }\n\n    if (!isSanitizerEnabled() || typeof untrustedString !== 'string' || untrustedString === '') {\n      return untrustedString;\n    }\n    /**\n     * Create a document fragment\n     * separate from the main DOM,\n     * create a div to do our work in\n     */\n\n\n    const documentFragment = document.createDocumentFragment();\n    const workingDiv = document.createElement('div');\n    documentFragment.appendChild(workingDiv);\n    workingDiv.innerHTML = untrustedString;\n    /**\n     * Remove any elements\n     * that are blocked\n     */\n\n    blockedTags.forEach(blockedTag => {\n      const getElementsToRemove = documentFragment.querySelectorAll(blockedTag);\n\n      for (let elementIndex = getElementsToRemove.length - 1; elementIndex >= 0; elementIndex--) {\n        const element = getElementsToRemove[elementIndex];\n\n        if (element.parentNode) {\n          element.parentNode.removeChild(element);\n        } else {\n          documentFragment.removeChild(element);\n        }\n        /**\n         * We still need to sanitize\n         * the children of this element\n         * as they are left behind\n         */\n\n\n        const childElements = getElementChildren(element);\n        /* tslint:disable-next-line */\n\n        for (let childIndex = 0; childIndex < childElements.length; childIndex++) {\n          sanitizeElement(childElements[childIndex]);\n        }\n      }\n    });\n    /**\n     * Go through remaining elements and remove\n     * non-allowed attribs\n     */\n    // IE does not support .children on document fragments, only .childNodes\n\n    const dfChildren = getElementChildren(documentFragment);\n    /* tslint:disable-next-line */\n\n    for (let childIndex = 0; childIndex < dfChildren.length; childIndex++) {\n      sanitizeElement(dfChildren[childIndex]);\n    } // Append document fragment to div\n\n\n    const fragmentDiv = document.createElement('div');\n    fragmentDiv.appendChild(documentFragment); // First child is always the div we did our work in\n\n    const getInnerDiv = fragmentDiv.querySelector('div');\n    return getInnerDiv !== null ? getInnerDiv.innerHTML : fragmentDiv.innerHTML;\n  } catch (err) {\n    console.error(err);\n    return '';\n  }\n};\n/**\n * Clean up current element based on allowed attributes\n * and then recursively dig down into any child elements to\n * clean those up as well\n */\n\n\nconst sanitizeElement = element => {\n  // IE uses childNodes, so ignore nodes that are not elements\n  if (element.nodeType && element.nodeType !== 1) {\n    return;\n  }\n\n  for (let i = element.attributes.length - 1; i >= 0; i--) {\n    const attribute = element.attributes.item(i);\n    const attributeName = attribute.name; // remove non-allowed attribs\n\n    if (!allowedAttributes.includes(attributeName.toLowerCase())) {\n      element.removeAttribute(attributeName);\n      continue;\n    } // clean up any allowed attribs\n    // that attempt to do any JS funny-business\n\n\n    const attributeValue = attribute.value;\n    /* tslint:disable-next-line */\n\n    if (attributeValue != null && attributeValue.toLowerCase().includes('javascript:')) {\n      element.removeAttribute(attributeName);\n    }\n  }\n  /**\n   * Sanitize any nested children\n   */\n\n\n  const childElements = getElementChildren(element);\n  /* tslint:disable-next-line */\n\n  for (let i = 0; i < childElements.length; i++) {\n    sanitizeElement(childElements[i]);\n  }\n};\n/**\n * IE doesn't always support .children\n * so we revert to .childNodes instead\n */\n\n\nconst getElementChildren = el => {\n  return el.children != null ? el.children : el.childNodes;\n};\n\nconst isSanitizerEnabled = () => {\n  const win = window;\n  const config = win && win.Ionic && win.Ionic.config;\n\n  if (config) {\n    if (config.get) {\n      return config.get('sanitizerEnabled', true);\n    } else {\n      return config.sanitizerEnabled === true || config.sanitizerEnabled === undefined;\n    }\n  }\n\n  return true;\n};\n\nconst allowedAttributes = ['class', 'id', 'href', 'src', 'name', 'slot'];\nconst blockedTags = ['script', 'style', 'iframe', 'meta', 'link', 'object', 'embed'];\n\nclass IonicSafeString {\n  constructor(value) {\n    this.value = value;\n  }\n\n}\n\nexport { IonicSafeString as I, sanitizeDOMString as s };","map":{"version":3,"sources":["/media/theticarcher38/Volume/Code/LawsForPaws/LawsForPawsApp/node_modules/@ionic/core/dist/esm/index-9e3fe806.js"],"names":["sanitizeDOMString","untrustedString","IonicSafeString","value","isSanitizerEnabled","documentFragment","document","createDocumentFragment","workingDiv","createElement","appendChild","innerHTML","blockedTags","forEach","blockedTag","getElementsToRemove","querySelectorAll","elementIndex","length","element","parentNode","removeChild","childElements","getElementChildren","childIndex","sanitizeElement","dfChildren","fragmentDiv","getInnerDiv","querySelector","err","console","error","nodeType","i","attributes","attribute","item","attributeName","name","allowedAttributes","includes","toLowerCase","removeAttribute","attributeValue","el","children","childNodes","win","window","config","Ionic","get","sanitizerEnabled","undefined","constructor","I","s"],"mappings":"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","sourcesContent":["/**\n * Does a simple sanitization of all elements\n * in an untrusted string\n */\nconst sanitizeDOMString = (untrustedString) => {\n  try {\n    if (untrustedString instanceof IonicSafeString) {\n      return untrustedString.value;\n    }\n    if (!isSanitizerEnabled() || typeof untrustedString !== 'string' || untrustedString === '') {\n      return untrustedString;\n    }\n    /**\n     * Create a document fragment\n     * separate from the main DOM,\n     * create a div to do our work in\n     */\n    const documentFragment = document.createDocumentFragment();\n    const workingDiv = document.createElement('div');\n    documentFragment.appendChild(workingDiv);\n    workingDiv.innerHTML = untrustedString;\n    /**\n     * Remove any elements\n     * that are blocked\n     */\n    blockedTags.forEach(blockedTag => {\n      const getElementsToRemove = documentFragment.querySelectorAll(blockedTag);\n      for (let elementIndex = getElementsToRemove.length - 1; elementIndex >= 0; elementIndex--) {\n        const element = getElementsToRemove[elementIndex];\n        if (element.parentNode) {\n          element.parentNode.removeChild(element);\n        }\n        else {\n          documentFragment.removeChild(element);\n        }\n        /**\n         * We still need to sanitize\n         * the children of this element\n         * as they are left behind\n         */\n        const childElements = getElementChildren(element);\n        /* tslint:disable-next-line */\n        for (let childIndex = 0; childIndex < childElements.length; childIndex++) {\n          sanitizeElement(childElements[childIndex]);\n        }\n      }\n    });\n    /**\n     * Go through remaining elements and remove\n     * non-allowed attribs\n     */\n    // IE does not support .children on document fragments, only .childNodes\n    const dfChildren = getElementChildren(documentFragment);\n    /* tslint:disable-next-line */\n    for (let childIndex = 0; childIndex < dfChildren.length; childIndex++) {\n      sanitizeElement(dfChildren[childIndex]);\n    }\n    // Append document fragment to div\n    const fragmentDiv = document.createElement('div');\n    fragmentDiv.appendChild(documentFragment);\n    // First child is always the div we did our work in\n    const getInnerDiv = fragmentDiv.querySelector('div');\n    return (getInnerDiv !== null) ? getInnerDiv.innerHTML : fragmentDiv.innerHTML;\n  }\n  catch (err) {\n    console.error(err);\n    return '';\n  }\n};\n/**\n * Clean up current element based on allowed attributes\n * and then recursively dig down into any child elements to\n * clean those up as well\n */\nconst sanitizeElement = (element) => {\n  // IE uses childNodes, so ignore nodes that are not elements\n  if (element.nodeType && element.nodeType !== 1) {\n    return;\n  }\n  for (let i = element.attributes.length - 1; i >= 0; i--) {\n    const attribute = element.attributes.item(i);\n    const attributeName = attribute.name;\n    // remove non-allowed attribs\n    if (!allowedAttributes.includes(attributeName.toLowerCase())) {\n      element.removeAttribute(attributeName);\n      continue;\n    }\n    // clean up any allowed attribs\n    // that attempt to do any JS funny-business\n    const attributeValue = attribute.value;\n    /* tslint:disable-next-line */\n    if (attributeValue != null && attributeValue.toLowerCase().includes('javascript:')) {\n      element.removeAttribute(attributeName);\n    }\n  }\n  /**\n   * Sanitize any nested children\n   */\n  const childElements = getElementChildren(element);\n  /* tslint:disable-next-line */\n  for (let i = 0; i < childElements.length; i++) {\n    sanitizeElement(childElements[i]);\n  }\n};\n/**\n * IE doesn't always support .children\n * so we revert to .childNodes instead\n */\nconst getElementChildren = (el) => {\n  return (el.children != null) ? el.children : el.childNodes;\n};\nconst isSanitizerEnabled = () => {\n  const win = window;\n  const config = win && win.Ionic && win.Ionic.config;\n  if (config) {\n    if (config.get) {\n      return config.get('sanitizerEnabled', true);\n    }\n    else {\n      return config.sanitizerEnabled === true || config.sanitizerEnabled === undefined;\n    }\n  }\n  return true;\n};\nconst allowedAttributes = ['class', 'id', 'href', 'src', 'name', 'slot'];\nconst blockedTags = ['script', 'style', 'iframe', 'meta', 'link', 'object', 'embed'];\nclass IonicSafeString {\n  constructor(value) {\n    this.value = value;\n  }\n}\n\nexport { IonicSafeString as I, sanitizeDOMString as s };\n"]},"metadata":{},"sourceType":"module"}