{"ast":null,"code":"class GestureController {\n  constructor() {\n    this.gestureId = 0;\n    this.requestedStart = new Map();\n    this.disabledGestures = new Map();\n    this.disabledScroll = new Set();\n  }\n  /**\n   * Creates a gesture delegate based on the GestureConfig passed\n   */\n\n\n  createGesture(config) {\n    return new GestureDelegate(this, this.newID(), config.name, config.priority || 0, !!config.disableScroll);\n  }\n  /**\n   * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n   */\n\n\n  createBlocker(opts = {}) {\n    return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n  }\n\n  start(gestureName, id, priority) {\n    if (!this.canStart(gestureName)) {\n      this.requestedStart.delete(id);\n      return false;\n    }\n\n    this.requestedStart.set(id, priority);\n    return true;\n  }\n\n  capture(gestureName, id, priority) {\n    if (!this.start(gestureName, id, priority)) {\n      return false;\n    }\n\n    const requestedStart = this.requestedStart;\n    let maxPriority = -10000;\n    requestedStart.forEach(value => {\n      maxPriority = Math.max(maxPriority, value);\n    });\n\n    if (maxPriority === priority) {\n      this.capturedId = id;\n      requestedStart.clear();\n      const event = new CustomEvent('ionGestureCaptured', {\n        detail: {\n          gestureName\n        }\n      });\n      document.dispatchEvent(event);\n      return true;\n    }\n\n    requestedStart.delete(id);\n    return false;\n  }\n\n  release(id) {\n    this.requestedStart.delete(id);\n\n    if (this.capturedId === id) {\n      this.capturedId = undefined;\n    }\n  }\n\n  disableGesture(gestureName, id) {\n    let set = this.disabledGestures.get(gestureName);\n\n    if (set === undefined) {\n      set = new Set();\n      this.disabledGestures.set(gestureName, set);\n    }\n\n    set.add(id);\n  }\n\n  enableGesture(gestureName, id) {\n    const set = this.disabledGestures.get(gestureName);\n\n    if (set !== undefined) {\n      set.delete(id);\n    }\n  }\n\n  disableScroll(id) {\n    this.disabledScroll.add(id);\n\n    if (this.disabledScroll.size === 1) {\n      document.body.classList.add(BACKDROP_NO_SCROLL);\n    }\n  }\n\n  enableScroll(id) {\n    this.disabledScroll.delete(id);\n\n    if (this.disabledScroll.size === 0) {\n      document.body.classList.remove(BACKDROP_NO_SCROLL);\n    }\n  }\n\n  canStart(gestureName) {\n    if (this.capturedId !== undefined) {\n      // a gesture already captured\n      return false;\n    }\n\n    if (this.isDisabled(gestureName)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isCaptured() {\n    return this.capturedId !== undefined;\n  }\n\n  isScrollDisabled() {\n    return this.disabledScroll.size > 0;\n  }\n\n  isDisabled(gestureName) {\n    const disabled = this.disabledGestures.get(gestureName);\n\n    if (disabled && disabled.size > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  newID() {\n    this.gestureId++;\n    return this.gestureId;\n  }\n\n}\n\nclass GestureDelegate {\n  constructor(ctrl, id, name, priority, disableScroll) {\n    this.id = id;\n    this.name = name;\n    this.disableScroll = disableScroll;\n    this.priority = priority * 1000000 + id;\n    this.ctrl = ctrl;\n  }\n\n  canStart() {\n    if (!this.ctrl) {\n      return false;\n    }\n\n    return this.ctrl.canStart(this.name);\n  }\n\n  start() {\n    if (!this.ctrl) {\n      return false;\n    }\n\n    return this.ctrl.start(this.name, this.id, this.priority);\n  }\n\n  capture() {\n    if (!this.ctrl) {\n      return false;\n    }\n\n    const captured = this.ctrl.capture(this.name, this.id, this.priority);\n\n    if (captured && this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n\n    return captured;\n  }\n\n  release() {\n    if (this.ctrl) {\n      this.ctrl.release(this.id);\n\n      if (this.disableScroll) {\n        this.ctrl.enableScroll(this.id);\n      }\n    }\n  }\n\n  destroy() {\n    this.release();\n    this.ctrl = undefined;\n  }\n\n}\n\nclass BlockerDelegate {\n  constructor(ctrl, id, disable, disableScroll) {\n    this.id = id;\n    this.disable = disable;\n    this.disableScroll = disableScroll;\n    this.ctrl = ctrl;\n  }\n\n  block() {\n    if (!this.ctrl) {\n      return;\n    }\n\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.disableGesture(gesture, this.id);\n      }\n    }\n\n    if (this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n  }\n\n  unblock() {\n    if (!this.ctrl) {\n      return;\n    }\n\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.enableGesture(gesture, this.id);\n      }\n    }\n\n    if (this.disableScroll) {\n      this.ctrl.enableScroll(this.id);\n    }\n  }\n\n  destroy() {\n    this.unblock();\n    this.ctrl = undefined;\n  }\n\n}\n\nconst BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nconst GESTURE_CONTROLLER = new GestureController();\nexport { GESTURE_CONTROLLER as G };","map":{"version":3,"sources":["/workspace/LawsForPaws/LawsForPawsApp/node_modules/@ionic/core/dist/esm/gesture-controller-31cb6bb9.js"],"names":["GestureController","constructor","gestureId","requestedStart","Map","disabledGestures","disabledScroll","Set","createGesture","config","GestureDelegate","newID","name","priority","disableScroll","createBlocker","opts","BlockerDelegate","disable","start","gestureName","id","canStart","delete","set","capture","maxPriority","forEach","value","Math","max","capturedId","clear","event","CustomEvent","detail","document","dispatchEvent","release","undefined","disableGesture","get","add","enableGesture","size","body","classList","BACKDROP_NO_SCROLL","enableScroll","remove","isDisabled","isCaptured","isScrollDisabled","disabled","ctrl","captured","destroy","block","gesture","unblock","GESTURE_CONTROLLER","G"],"mappings":"AAAA,MAAMA,iBAAN,CAAwB;AACtBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACA,SAAKC,gBAAL,GAAwB,IAAID,GAAJ,EAAxB;AACA,SAAKE,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACD;AACD;AACF;AACA;;;AACEC,EAAAA,aAAa,CAACC,MAAD,EAAS;AACpB,WAAO,IAAIC,eAAJ,CAAoB,IAApB,EAA0B,KAAKC,KAAL,EAA1B,EAAwCF,MAAM,CAACG,IAA/C,EAAqDH,MAAM,CAACI,QAAP,IAAmB,CAAxE,EAA2E,CAAC,CAACJ,MAAM,CAACK,aAApF,CAAP;AACD;AACD;AACF;AACA;;;AACEC,EAAAA,aAAa,CAACC,IAAI,GAAG,EAAR,EAAY;AACvB,WAAO,IAAIC,eAAJ,CAAoB,IAApB,EAA0B,KAAKN,KAAL,EAA1B,EAAwCK,IAAI,CAACE,OAA7C,EAAsD,CAAC,CAACF,IAAI,CAACF,aAA7D,CAAP;AACD;;AACDK,EAAAA,KAAK,CAACC,WAAD,EAAcC,EAAd,EAAkBR,QAAlB,EAA4B;AAC/B,QAAI,CAAC,KAAKS,QAAL,CAAcF,WAAd,CAAL,EAAiC;AAC/B,WAAKjB,cAAL,CAAoBoB,MAApB,CAA2BF,EAA3B;AACA,aAAO,KAAP;AACD;;AACD,SAAKlB,cAAL,CAAoBqB,GAApB,CAAwBH,EAAxB,EAA4BR,QAA5B;AACA,WAAO,IAAP;AACD;;AACDY,EAAAA,OAAO,CAACL,WAAD,EAAcC,EAAd,EAAkBR,QAAlB,EAA4B;AACjC,QAAI,CAAC,KAAKM,KAAL,CAAWC,WAAX,EAAwBC,EAAxB,EAA4BR,QAA5B,CAAL,EAA4C;AAC1C,aAAO,KAAP;AACD;;AACD,UAAMV,cAAc,GAAG,KAAKA,cAA5B;AACA,QAAIuB,WAAW,GAAG,CAAC,KAAnB;AACAvB,IAAAA,cAAc,CAACwB,OAAf,CAAuBC,KAAK,IAAI;AAC9BF,MAAAA,WAAW,GAAGG,IAAI,CAACC,GAAL,CAASJ,WAAT,EAAsBE,KAAtB,CAAd;AACD,KAFD;;AAGA,QAAIF,WAAW,KAAKb,QAApB,EAA8B;AAC5B,WAAKkB,UAAL,GAAkBV,EAAlB;AACAlB,MAAAA,cAAc,CAAC6B,KAAf;AACA,YAAMC,KAAK,GAAG,IAAIC,WAAJ,CAAgB,oBAAhB,EAAsC;AAAEC,QAAAA,MAAM,EAAE;AAAEf,UAAAA;AAAF;AAAV,OAAtC,CAAd;AACAgB,MAAAA,QAAQ,CAACC,aAAT,CAAuBJ,KAAvB;AACA,aAAO,IAAP;AACD;;AACD9B,IAAAA,cAAc,CAACoB,MAAf,CAAsBF,EAAtB;AACA,WAAO,KAAP;AACD;;AACDiB,EAAAA,OAAO,CAACjB,EAAD,EAAK;AACV,SAAKlB,cAAL,CAAoBoB,MAApB,CAA2BF,EAA3B;;AACA,QAAI,KAAKU,UAAL,KAAoBV,EAAxB,EAA4B;AAC1B,WAAKU,UAAL,GAAkBQ,SAAlB;AACD;AACF;;AACDC,EAAAA,cAAc,CAACpB,WAAD,EAAcC,EAAd,EAAkB;AAC9B,QAAIG,GAAG,GAAG,KAAKnB,gBAAL,CAAsBoC,GAAtB,CAA0BrB,WAA1B,CAAV;;AACA,QAAII,GAAG,KAAKe,SAAZ,EAAuB;AACrBf,MAAAA,GAAG,GAAG,IAAIjB,GAAJ,EAAN;AACA,WAAKF,gBAAL,CAAsBmB,GAAtB,CAA0BJ,WAA1B,EAAuCI,GAAvC;AACD;;AACDA,IAAAA,GAAG,CAACkB,GAAJ,CAAQrB,EAAR;AACD;;AACDsB,EAAAA,aAAa,CAACvB,WAAD,EAAcC,EAAd,EAAkB;AAC7B,UAAMG,GAAG,GAAG,KAAKnB,gBAAL,CAAsBoC,GAAtB,CAA0BrB,WAA1B,CAAZ;;AACA,QAAII,GAAG,KAAKe,SAAZ,EAAuB;AACrBf,MAAAA,GAAG,CAACD,MAAJ,CAAWF,EAAX;AACD;AACF;;AACDP,EAAAA,aAAa,CAACO,EAAD,EAAK;AAChB,SAAKf,cAAL,CAAoBoC,GAApB,CAAwBrB,EAAxB;;AACA,QAAI,KAAKf,cAAL,CAAoBsC,IAApB,KAA6B,CAAjC,EAAoC;AAClCR,MAAAA,QAAQ,CAACS,IAAT,CAAcC,SAAd,CAAwBJ,GAAxB,CAA4BK,kBAA5B;AACD;AACF;;AACDC,EAAAA,YAAY,CAAC3B,EAAD,EAAK;AACf,SAAKf,cAAL,CAAoBiB,MAApB,CAA2BF,EAA3B;;AACA,QAAI,KAAKf,cAAL,CAAoBsC,IAApB,KAA6B,CAAjC,EAAoC;AAClCR,MAAAA,QAAQ,CAACS,IAAT,CAAcC,SAAd,CAAwBG,MAAxB,CAA+BF,kBAA/B;AACD;AACF;;AACDzB,EAAAA,QAAQ,CAACF,WAAD,EAAc;AACpB,QAAI,KAAKW,UAAL,KAAoBQ,SAAxB,EAAmC;AACjC;AACA,aAAO,KAAP;AACD;;AACD,QAAI,KAAKW,UAAL,CAAgB9B,WAAhB,CAAJ,EAAkC;AAChC,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AACD+B,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKpB,UAAL,KAAoBQ,SAA3B;AACD;;AACDa,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAK9C,cAAL,CAAoBsC,IAApB,GAA2B,CAAlC;AACD;;AACDM,EAAAA,UAAU,CAAC9B,WAAD,EAAc;AACtB,UAAMiC,QAAQ,GAAG,KAAKhD,gBAAL,CAAsBoC,GAAtB,CAA0BrB,WAA1B,CAAjB;;AACA,QAAIiC,QAAQ,IAAIA,QAAQ,CAACT,IAAT,GAAgB,CAAhC,EAAmC;AACjC,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AACDjC,EAAAA,KAAK,GAAG;AACN,SAAKT,SAAL;AACA,WAAO,KAAKA,SAAZ;AACD;;AAxGqB;;AA0GxB,MAAMQ,eAAN,CAAsB;AACpBT,EAAAA,WAAW,CAACqD,IAAD,EAAOjC,EAAP,EAAWT,IAAX,EAAiBC,QAAjB,EAA2BC,aAA3B,EAA0C;AACnD,SAAKO,EAAL,GAAUA,EAAV;AACA,SAAKT,IAAL,GAAYA,IAAZ;AACA,SAAKE,aAAL,GAAqBA,aAArB;AACA,SAAKD,QAAL,GAAgBA,QAAQ,GAAG,OAAX,GAAqBQ,EAArC;AACA,SAAKiC,IAAL,GAAYA,IAAZ;AACD;;AACDhC,EAAAA,QAAQ,GAAG;AACT,QAAI,CAAC,KAAKgC,IAAV,EAAgB;AACd,aAAO,KAAP;AACD;;AACD,WAAO,KAAKA,IAAL,CAAUhC,QAAV,CAAmB,KAAKV,IAAxB,CAAP;AACD;;AACDO,EAAAA,KAAK,GAAG;AACN,QAAI,CAAC,KAAKmC,IAAV,EAAgB;AACd,aAAO,KAAP;AACD;;AACD,WAAO,KAAKA,IAAL,CAAUnC,KAAV,CAAgB,KAAKP,IAArB,EAA2B,KAAKS,EAAhC,EAAoC,KAAKR,QAAzC,CAAP;AACD;;AACDY,EAAAA,OAAO,GAAG;AACR,QAAI,CAAC,KAAK6B,IAAV,EAAgB;AACd,aAAO,KAAP;AACD;;AACD,UAAMC,QAAQ,GAAG,KAAKD,IAAL,CAAU7B,OAAV,CAAkB,KAAKb,IAAvB,EAA6B,KAAKS,EAAlC,EAAsC,KAAKR,QAA3C,CAAjB;;AACA,QAAI0C,QAAQ,IAAI,KAAKzC,aAArB,EAAoC;AAClC,WAAKwC,IAAL,CAAUxC,aAAV,CAAwB,KAAKO,EAA7B;AACD;;AACD,WAAOkC,QAAP;AACD;;AACDjB,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKgB,IAAT,EAAe;AACb,WAAKA,IAAL,CAAUhB,OAAV,CAAkB,KAAKjB,EAAvB;;AACA,UAAI,KAAKP,aAAT,EAAwB;AACtB,aAAKwC,IAAL,CAAUN,YAAV,CAAuB,KAAK3B,EAA5B;AACD;AACF;AACF;;AACDmC,EAAAA,OAAO,GAAG;AACR,SAAKlB,OAAL;AACA,SAAKgB,IAAL,GAAYf,SAAZ;AACD;;AAzCmB;;AA2CtB,MAAMtB,eAAN,CAAsB;AACpBhB,EAAAA,WAAW,CAACqD,IAAD,EAAOjC,EAAP,EAAWH,OAAX,EAAoBJ,aAApB,EAAmC;AAC5C,SAAKO,EAAL,GAAUA,EAAV;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKJ,aAAL,GAAqBA,aAArB;AACA,SAAKwC,IAAL,GAAYA,IAAZ;AACD;;AACDG,EAAAA,KAAK,GAAG;AACN,QAAI,CAAC,KAAKH,IAAV,EAAgB;AACd;AACD;;AACD,QAAI,KAAKpC,OAAT,EAAkB;AAChB,WAAK,MAAMwC,OAAX,IAAsB,KAAKxC,OAA3B,EAAoC;AAClC,aAAKoC,IAAL,CAAUd,cAAV,CAAyBkB,OAAzB,EAAkC,KAAKrC,EAAvC;AACD;AACF;;AACD,QAAI,KAAKP,aAAT,EAAwB;AACtB,WAAKwC,IAAL,CAAUxC,aAAV,CAAwB,KAAKO,EAA7B;AACD;AACF;;AACDsC,EAAAA,OAAO,GAAG;AACR,QAAI,CAAC,KAAKL,IAAV,EAAgB;AACd;AACD;;AACD,QAAI,KAAKpC,OAAT,EAAkB;AAChB,WAAK,MAAMwC,OAAX,IAAsB,KAAKxC,OAA3B,EAAoC;AAClC,aAAKoC,IAAL,CAAUX,aAAV,CAAwBe,OAAxB,EAAiC,KAAKrC,EAAtC;AACD;AACF;;AACD,QAAI,KAAKP,aAAT,EAAwB;AACtB,WAAKwC,IAAL,CAAUN,YAAV,CAAuB,KAAK3B,EAA5B;AACD;AACF;;AACDmC,EAAAA,OAAO,GAAG;AACR,SAAKG,OAAL;AACA,SAAKL,IAAL,GAAYf,SAAZ;AACD;;AApCmB;;AAsCtB,MAAMQ,kBAAkB,GAAG,oBAA3B;AACA,MAAMa,kBAAkB,GAAG,IAAI5D,iBAAJ,EAA3B;AAEA,SAAS4D,kBAAkB,IAAIC,CAA/B","sourcesContent":["class GestureController {\n  constructor() {\n    this.gestureId = 0;\n    this.requestedStart = new Map();\n    this.disabledGestures = new Map();\n    this.disabledScroll = new Set();\n  }\n  /**\n   * Creates a gesture delegate based on the GestureConfig passed\n   */\n  createGesture(config) {\n    return new GestureDelegate(this, this.newID(), config.name, config.priority || 0, !!config.disableScroll);\n  }\n  /**\n   * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n   */\n  createBlocker(opts = {}) {\n    return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n  }\n  start(gestureName, id, priority) {\n    if (!this.canStart(gestureName)) {\n      this.requestedStart.delete(id);\n      return false;\n    }\n    this.requestedStart.set(id, priority);\n    return true;\n  }\n  capture(gestureName, id, priority) {\n    if (!this.start(gestureName, id, priority)) {\n      return false;\n    }\n    const requestedStart = this.requestedStart;\n    let maxPriority = -10000;\n    requestedStart.forEach(value => {\n      maxPriority = Math.max(maxPriority, value);\n    });\n    if (maxPriority === priority) {\n      this.capturedId = id;\n      requestedStart.clear();\n      const event = new CustomEvent('ionGestureCaptured', { detail: { gestureName } });\n      document.dispatchEvent(event);\n      return true;\n    }\n    requestedStart.delete(id);\n    return false;\n  }\n  release(id) {\n    this.requestedStart.delete(id);\n    if (this.capturedId === id) {\n      this.capturedId = undefined;\n    }\n  }\n  disableGesture(gestureName, id) {\n    let set = this.disabledGestures.get(gestureName);\n    if (set === undefined) {\n      set = new Set();\n      this.disabledGestures.set(gestureName, set);\n    }\n    set.add(id);\n  }\n  enableGesture(gestureName, id) {\n    const set = this.disabledGestures.get(gestureName);\n    if (set !== undefined) {\n      set.delete(id);\n    }\n  }\n  disableScroll(id) {\n    this.disabledScroll.add(id);\n    if (this.disabledScroll.size === 1) {\n      document.body.classList.add(BACKDROP_NO_SCROLL);\n    }\n  }\n  enableScroll(id) {\n    this.disabledScroll.delete(id);\n    if (this.disabledScroll.size === 0) {\n      document.body.classList.remove(BACKDROP_NO_SCROLL);\n    }\n  }\n  canStart(gestureName) {\n    if (this.capturedId !== undefined) {\n      // a gesture already captured\n      return false;\n    }\n    if (this.isDisabled(gestureName)) {\n      return false;\n    }\n    return true;\n  }\n  isCaptured() {\n    return this.capturedId !== undefined;\n  }\n  isScrollDisabled() {\n    return this.disabledScroll.size > 0;\n  }\n  isDisabled(gestureName) {\n    const disabled = this.disabledGestures.get(gestureName);\n    if (disabled && disabled.size > 0) {\n      return true;\n    }\n    return false;\n  }\n  newID() {\n    this.gestureId++;\n    return this.gestureId;\n  }\n}\nclass GestureDelegate {\n  constructor(ctrl, id, name, priority, disableScroll) {\n    this.id = id;\n    this.name = name;\n    this.disableScroll = disableScroll;\n    this.priority = priority * 1000000 + id;\n    this.ctrl = ctrl;\n  }\n  canStart() {\n    if (!this.ctrl) {\n      return false;\n    }\n    return this.ctrl.canStart(this.name);\n  }\n  start() {\n    if (!this.ctrl) {\n      return false;\n    }\n    return this.ctrl.start(this.name, this.id, this.priority);\n  }\n  capture() {\n    if (!this.ctrl) {\n      return false;\n    }\n    const captured = this.ctrl.capture(this.name, this.id, this.priority);\n    if (captured && this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n    return captured;\n  }\n  release() {\n    if (this.ctrl) {\n      this.ctrl.release(this.id);\n      if (this.disableScroll) {\n        this.ctrl.enableScroll(this.id);\n      }\n    }\n  }\n  destroy() {\n    this.release();\n    this.ctrl = undefined;\n  }\n}\nclass BlockerDelegate {\n  constructor(ctrl, id, disable, disableScroll) {\n    this.id = id;\n    this.disable = disable;\n    this.disableScroll = disableScroll;\n    this.ctrl = ctrl;\n  }\n  block() {\n    if (!this.ctrl) {\n      return;\n    }\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.disableGesture(gesture, this.id);\n      }\n    }\n    if (this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n  }\n  unblock() {\n    if (!this.ctrl) {\n      return;\n    }\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.enableGesture(gesture, this.id);\n      }\n    }\n    if (this.disableScroll) {\n      this.ctrl.enableScroll(this.id);\n    }\n  }\n  destroy() {\n    this.unblock();\n    this.ctrl = undefined;\n  }\n}\nconst BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nconst GESTURE_CONTROLLER = new GestureController();\n\nexport { GESTURE_CONTROLLER as G };\n"]},"metadata":{},"sourceType":"module"}