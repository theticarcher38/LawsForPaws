{"ast":null,"code":"const HapticEngine = {\n  getEngine() {\n    const win = window;\n    return win.TapticEngine || win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics;\n  },\n\n  available() {\n    return !!this.getEngine();\n  },\n\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n\n  impact(options) {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({\n      style\n    });\n  },\n\n  notification(options) {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({\n      style\n    });\n  },\n\n  selection() {\n    this.impact({\n      style: 'light'\n    });\n  },\n\n  selectionStart() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n\n  selectionChanged() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n\n  selectionEnd() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\n\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\n\n\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\n\n\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\n\n\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\n\n\nconst hapticImpact = options => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };","map":{"version":3,"sources":["/workspace/LawsForPaws/LawsForPawsApp/node_modules/@ionic/core/dist/esm/haptic-27b3f981.js"],"names":["HapticEngine","getEngine","win","window","TapticEngine","Capacitor","isPluginAvailable","Plugins","Haptics","available","isCordova","isCapacitor","impact","options","engine","style","toUpperCase","notification","selection","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","a","b","c","d","h"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,GAAG;AACV,UAAMC,GAAG,GAAGC,MAAZ;AACA,WAAQD,GAAG,CAACE,YAAL,IAAuBF,GAAG,CAACG,SAAJ,IAAiBH,GAAG,CAACG,SAAJ,CAAcC,iBAAd,CAAgC,SAAhC,CAAjB,IAA+DJ,GAAG,CAACG,SAAJ,CAAcE,OAAd,CAAsBC,OAAnH;AACD,GAJkB;;AAKnBC,EAAAA,SAAS,GAAG;AACV,WAAO,CAAC,CAAC,KAAKR,SAAL,EAAT;AACD,GAPkB;;AAQnBS,EAAAA,SAAS,GAAG;AACV,WAAO,CAAC,CAACP,MAAM,CAACC,YAAhB;AACD,GAVkB;;AAWnBO,EAAAA,WAAW,GAAG;AACZ,UAAMT,GAAG,GAAGC,MAAZ;AACA,WAAO,CAAC,CAACD,GAAG,CAACG,SAAb;AACD,GAdkB;;AAenBO,EAAAA,MAAM,CAACC,OAAD,EAAU;AACd,UAAMC,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACX;AACD;;AACD,UAAMC,KAAK,GAAG,KAAKJ,WAAL,KAAqBE,OAAO,CAACE,KAAR,CAAcC,WAAd,EAArB,GAAmDH,OAAO,CAACE,KAAzE;AACAD,IAAAA,MAAM,CAACF,MAAP,CAAc;AAAEG,MAAAA;AAAF,KAAd;AACD,GAtBkB;;AAuBnBE,EAAAA,YAAY,CAACJ,OAAD,EAAU;AACpB,UAAMC,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACX;AACD;;AACD,UAAMC,KAAK,GAAG,KAAKJ,WAAL,KAAqBE,OAAO,CAACE,KAAR,CAAcC,WAAd,EAArB,GAAmDH,OAAO,CAACE,KAAzE;AACAD,IAAAA,MAAM,CAACG,YAAP,CAAoB;AAAEF,MAAAA;AAAF,KAApB;AACD,GA9BkB;;AA+BnBG,EAAAA,SAAS,GAAG;AACV,SAAKN,MAAL,CAAY;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAZ;AACD,GAjCkB;;AAkCnBI,EAAAA,cAAc,GAAG;AACf,UAAML,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACX;AACD;;AACD,QAAI,KAAKH,WAAL,EAAJ,EAAwB;AACtBG,MAAAA,MAAM,CAACK,cAAP;AACD,KAFD,MAGK;AACHL,MAAAA,MAAM,CAACM,qBAAP;AACD;AACF,GA7CkB;;AA8CnBC,EAAAA,gBAAgB,GAAG;AACjB,UAAMP,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACX;AACD;;AACD,QAAI,KAAKH,WAAL,EAAJ,EAAwB;AACtBG,MAAAA,MAAM,CAACO,gBAAP;AACD,KAFD,MAGK;AACHP,MAAAA,MAAM,CAACQ,uBAAP;AACD;AACF,GAzDkB;;AA0DnBC,EAAAA,YAAY,GAAG;AACb,UAAMT,MAAM,GAAG,KAAKb,SAAL,EAAf;;AACA,QAAI,CAACa,MAAL,EAAa;AACX;AACD;;AACD,QAAI,KAAKH,WAAL,EAAJ,EAAwB;AACtBG,MAAAA,MAAM,CAACS,YAAP;AACD,KAFD,MAGK;AACHT,MAAAA,MAAM,CAACU,mBAAP;AACD;AACF;;AArEkB,CAArB;AAuEA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,MAAM;AAC5BzB,EAAAA,YAAY,CAACkB,SAAb;AACD,CAFD;AAGA;AACA;AACA;;;AACA,MAAMQ,oBAAoB,GAAG,MAAM;AACjC1B,EAAAA,YAAY,CAACmB,cAAb;AACD,CAFD;AAGA;AACA;AACA;;;AACA,MAAMQ,sBAAsB,GAAG,MAAM;AACnC3B,EAAAA,YAAY,CAACqB,gBAAb;AACD,CAFD;AAGA;AACA;AACA;AACA;;;AACA,MAAMO,kBAAkB,GAAG,MAAM;AAC/B5B,EAAAA,YAAY,CAACuB,YAAb;AACD,CAFD;AAGA;AACA;AACA;AACA;;;AACA,MAAMM,YAAY,GAAIhB,OAAD,IAAa;AAChCb,EAAAA,YAAY,CAACY,MAAb,CAAoBC,OAApB;AACD,CAFD;;AAIA,SAASa,oBAAoB,IAAII,CAAjC,EAAoCH,sBAAsB,IAAII,CAA9D,EAAiEN,eAAe,IAAIO,CAApF,EAAuFH,YAAY,IAAII,CAAvG,EAA0GL,kBAAkB,IAAIM,CAAhI","sourcesContent":["const HapticEngine = {\n  getEngine() {\n    const win = window;\n    return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    return !!this.getEngine();\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n"]},"metadata":{},"sourceType":"module"}