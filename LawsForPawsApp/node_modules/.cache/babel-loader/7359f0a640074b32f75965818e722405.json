{"ast":null,"code":"const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\n\nconst resetKeyboardAssist = () => {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\n\nconst startKeyboardAssist = win => {\n  startNativeListeners(win);\n\n  if (!win.visualViewport) {\n    return;\n  }\n\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n\n  win.visualViewport.onresize = () => {\n    trackViewportChanges(win);\n\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    } else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\n\n\nconst startNativeListeners = win => {\n  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\n\nconst setKeyboardOpen = (win, ev) => {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\n\nconst setKeyboardClose = win => {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\n\n\nconst keyboardDidOpen = () => {\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD;\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\n\n\nconst keyboardDidResize = win => {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\n\n\nconst keyboardDidClose = win => {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\n\n\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: {\n      keyboardHeight\n    }\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\n\n\nconst fireKeyboardCloseEvent = win => {\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\n\n\nconst trackViewportChanges = win => {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\n\n\nconst copyVisualViewport = visualViewport => {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };","map":{"version":3,"sources":["/workspace/LawsForPaws/LawsForPawsApp/node_modules/@ionic/core/dist/esm/keyboard-5742b5da.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"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","sourcesContent":["const KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nconst KEYBOARD_THRESHOLD = 150;\nlet previousVisualViewport = {};\nlet currentVisualViewport = {};\nlet keyboardOpen = false;\n/**\n * This is only used for tests\n */\nconst resetKeyboardAssist = () => {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\nconst startKeyboardAssist = (win) => {\n  startNativeListeners(win);\n  if (!win.visualViewport) {\n    return;\n  }\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  win.visualViewport.onresize = () => {\n    trackViewportChanges(win);\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    }\n    else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nconst startNativeListeners = (win) => {\n  win.addEventListener('keyboardDidShow', ev => setKeyboardOpen(win, ev));\n  win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\n};\nconst setKeyboardOpen = (win, ev) => {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\nconst setKeyboardClose = (win) => {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nconst keyboardDidOpen = () => {\n  const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return (!keyboardOpen &&\n    previousVisualViewport.width === currentVisualViewport.width &&\n    scaledHeightDifference > KEYBOARD_THRESHOLD);\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nconst keyboardDidResize = (win) => {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nconst keyboardDidClose = (win) => {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\n  const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: { keyboardHeight }\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nconst fireKeyboardCloseEvent = (win) => {\n  const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nconst trackViewportChanges = (win) => {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nconst copyVisualViewport = (visualViewport) => {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n"]},"metadata":{},"sourceType":"module"}